with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints200/unet_{init_features}_grf128_{correlation}_corr_{config}/training_loss.json', "rb") as fp:
    unet_training_loss_list_200 = json.load(fp)
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints200/unet_{init_features}_grf128_{correlation}_corr_{config}/testing_loss.json', "rb") as fp:
    unet_testing_loss_list_200 = json.load(fp)
    
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/unet_{init_features}_grf128_{correlation}_{config}/training_loss.json', "rb") as fp:
    unet_training_loss_list_400 = json.load(fp)
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/unet_{init_features}_grf128_{correlation}_{config}/testing_loss.json', "rb") as fp:
    unet_testing_loss_list_400 = json.load(fp)

with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints200/tfno_mode{modes}_hc{hc}_pc{pc}_grf128_{correlation}_corr_{config}/training_loss.json', "rb") as fp:
    tfno_training_loss_list_200 = json.load(fp)
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints200/tfno_mode{modes}_hc{hc}_pc{pc}_grf128_{correlation}_corr_{config}/testing_loss.json', "rb") as fp:
    tfno_testing_loss_list_200 = json.load(fp)
    
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/tfno_mode{modes}_hc{hc}_pc{pc}_grf128_{correlation}_{config}/training_loss.json', "rb") as fp:
    tfno_training_loss_list_400 = json.load(fp)
with open(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/tfno_mode{modes}_hc{hc}_pc{pc}_grf128_{correlation}_{config}/testing_loss.json', "rb") as fp:
    tfno_testing_loss_list_400 = json.load(fp)
    
fig = plt.figure(figsize=(4,8))

ax9 = fig.add_subplot(4, 1, 1)

# ax_list.append(fig.add_subplot(4, 1, i+1))
ax9.set_title(f'U-Net on {correlation} correlation data', fontsize=12)
ax9.plot(unet_training_loss_list_200,color='#ffb901',linewidth=3,label='Small training set')
ax9.plot(unet_testing_loss_list_200,color='#ffb901',linewidth=3,label='Small testing set',linestyle='--')
ax9.plot(unet_training_loss_list_400,color='#81bc06',linewidth=3,label='Big training set')
ax9.plot(unet_testing_loss_list_400,color='#81bc06',linewidth=3,label='Big testing set',linestyle='--')
ax9.set_yscale('log')
# ax9.set_ylabel(f'MSE loss', fontsize=12) 

ax11 = fig.add_subplot(4, 1, 2)
ax11.set_title(f'T-FNO on {correlation} correlation data', fontsize=12)
ax11.plot(tfno_training_loss_list_200,color='#ffb901',linewidth=3,label='small training set')
ax11.plot(tfno_testing_loss_list_200,color='#ffb901',linewidth=3,label='small testing set',linestyle='--')
ax11.plot(tfno_training_loss_list_400,color='#81bc06',linewidth=3,label='big training set')
ax11.plot(tfno_testing_loss_list_400,color='#81bc06',linewidth=3,label='big testing set',linestyle='--')
ax11.set_yscale('log')
# ax11.set_ylabel('MSE loss', fontsize=12) 

ax10 = fig.add_subplot(4, 1, 3)
ax10.set_title(f'U-Net on {correlation} correlation data', fontsize=12)
ax10.plot(unet_training_loss_list_200,color='#ffb901',linewidth=3,label='Small training set')
ax10.plot(unet_testing_loss_list_200,color='#ffb901',linewidth=3,label='Small testing set',linestyle='--')
ax10.plot(unet_training_loss_list_400,color='#81bc06',linewidth=3,label='Big training set')
ax10.plot(unet_testing_loss_list_400,color='#81bc06',linewidth=3,label='Big testing set',linestyle='--')
ax10.set_yscale('log')
# ax10.set_ylabel(f'MSE loss', fontsize=12) 

ax12 = fig.add_subplot(4, 1, 4)
ax12.set_title(f'T-FNO on {correlation} correlation data', fontsize=12)
ax12.plot(tfno_training_loss_list_200,color='#ffb901',linewidth=3,label='small training set')
ax12.plot(tfno_testing_loss_list_200,color='#ffb901',linewidth=3,label='small testing set',linestyle='--')
ax12.plot(tfno_training_loss_list_400,color='#81bc06',linewidth=3,label='big training set')
ax12.plot(tfno_testing_loss_list_400,color='#81bc06',linewidth=3,label='big testing set',linestyle='--')
ax12.set_yscale('log')
# ax12.set_ylabel('MSE loss', fontsize=12) 

plt.tight_layout()
plt.savefig(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/paper_plot_{config}_{correlation}_horizontal_loss.pdf', dpi=300)



colormap = 'viridis'

circle1 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle2 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle3 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle4 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle5 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle6 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle7 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle8 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle9 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle10 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle11 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
circle12 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
fig = plt.figure(figsize=(8, 8))
    
'''low correlation training sample'''
data = train_samples[0]
x = data['input'].to(device)
y = data['output'].to(device)
tfno_low_out = tfno_low_model(x.unsqueeze(0))
unet_low_out = unet_low_model(x.unsqueeze(0))

ax1 = fig.add_subplot(4, 4, 1)
im1 = ax1.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
ax1.set_title('TOF', fontsize=12)
plt.ylabel('Training', fontsize=12)   
ax1.set_xticks([])
ax1.set_yticks([])

ax2 = fig.add_subplot(4, 4, 2)
im2 = ax2.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
ax2.add_patch(circle1)
ax2.set_title('Ground Truth SS', fontsize=12)
plt.axis('off')

ax3 = fig.add_subplot(4, 4, 3)
im3 = ax3.imshow(tfno_low_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax3.add_patch(circle2)
ax3.set_title('T-FNO Prediction', fontsize=12)
plt.axis('off')

ax4 = fig.add_subplot(4, 4, 4)
im4 = ax4.imshow(unet_low_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax4.add_patch(circle3)
ax4.set_title('U-Net Prediction', fontsize=12)
plt.axis('off')

'''low correlation testing sample'''
data = test_samples[0]
x = data['input'].to(device)
y = data['output'].to(device)
tfno_low_out = tfno_low_model(x.unsqueeze(0))
unet_low_out = unet_low_model(x.unsqueeze(0))

ax5 = fig.add_subplot(4, 4, 5)
im5 = ax5.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
plt.ylabel('Testing', fontsize=12)      
ax5.set_xticks([])
ax5.set_yticks([])

ax6 = fig.add_subplot(4, 4, 6)
im6 = ax6.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
ax6.add_patch(circle4)
plt.axis('off')

ax7 = fig.add_subplot(4, 4, 7)
im7 = ax7.imshow(tfno_low_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax7.add_patch(circle5)
plt.axis('off')

ax8 = fig.add_subplot(4, 4, 8)
im8 = ax8.imshow(unet_low_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax8.add_patch(circle6)
plt.axis('off')

'''high correlation training sample'''
data = train_samples[1]
x = data['input'].to(device)
y = data['output'].to(device)
tfno_high_out = tfno_high_model(x.unsqueeze(0))
unet_high_out = unet_high_model(x.unsqueeze(0))

ax9 = fig.add_subplot(4, 4, 9)
im9 = ax9.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
plt.ylabel('Training', fontsize=12)   
ax9.set_xticks([])
ax9.set_yticks([])

ax10 = fig.add_subplot(4, 4, 10)
im10 = ax10.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
ax10.add_patch(circle7)
plt.axis('off')

ax11 = fig.add_subplot(4, 4, 11)
im11 = ax11.imshow(tfno_high_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax11.add_patch(circle8)
plt.axis('off')

ax12 = fig.add_subplot(4, 4, 12)
im12 = ax12.imshow(unet_high_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax12.add_patch(circle9)
plt.axis('off')

'''high correlation testing sample'''
data = test_samples[1]
x = data['input'].to(device)
y = data['output'].to(device)
tfno_high_out = tfno_high_model(x.unsqueeze(0))
unet_high_out = unet_high_model(x.unsqueeze(0))

ax13 = fig.add_subplot(4, 4, 13)
im13 = ax13.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
plt.ylabel('Testing', fontsize=12)      
ax13.set_xticks([])
ax13.set_yticks([])

ax14 = fig.add_subplot(4, 4, 14)
im14 = ax14.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
ax14.add_patch(circle10)
plt.axis('off')

ax15 = fig.add_subplot(4, 4, 15)
im15 = ax15.imshow(tfno_high_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax15.add_patch(circle11)
plt.axis('off')

ax16 = fig.add_subplot(4, 4, 16)
im16 = ax16.imshow(unet_high_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
ax16.add_patch(circle12)
plt.axis('off')

# plt.tight_layout()
# plt.savefig(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/paper_plot_{config}_{correlation}.pdf', dpi=300)





# colormap = 'viridis'
# circle1 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# circle2 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# circle3 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# circle4 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# circle5 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# circle6 = plt.Circle((63.5, 63.5), 41, color='r', fill=False, linestyle='--')
# fig = plt.figure(figsize=(8, 4))
    
# '''training sample'''
# data = train_samples[0]
# x = data['input'].to(device)
# y = data['output'].to(device)
# tfno_out = tfno_model(x.unsqueeze(0))
# unet_out = unet_model(x.unsqueeze(0))

# ax1 = fig.add_subplot(2, 4, 1)
# im1 = ax1.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
# ax1.set_title('TOF', fontsize=12)
# plt.ylabel('Training', fontsize=12)   
# ax1.set_xticks([])
# ax1.set_yticks([])

# ax2 = fig.add_subplot(2, 4, 2)
# im2 = ax2.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
# ax2.add_patch(circle1)
# ax2.set_title('Ground Truth SS', fontsize=12)
# plt.axis('off')

# ax3 = fig.add_subplot(2, 4, 3)
# im3 = ax3.imshow(tfno_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
# ax3.add_patch(circle2)
# ax3.set_title('T-FNO Prediction', fontsize=12)
# plt.axis('off')

# ax4 = fig.add_subplot(2, 4, 4)
# im4 = ax4.imshow(unet_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
# ax4.add_patch(circle3)
# ax4.set_title('U-Net Prediction', fontsize=12)
# plt.axis('off')

# '''testing sample'''
# data = test_samples[0]
# x = data['input'].to(device)
# y = data['output'].to(device)
# tfno_out = tfno_model(x.unsqueeze(0))
# unet_out = unet_model(x.unsqueeze(0))

# ax5 = fig.add_subplot(2, 4, 5)
# im5 = ax5.imshow(x[0].to('cpu'), cmap=colormap, vmin=0, vmax=1)
# plt.ylabel('Testing', fontsize=12)      
# ax5.set_xticks([])
# ax5.set_yticks([])

# ax6 = fig.add_subplot(2, 4, 6)
# im6 = ax6.imshow(y.to('cpu').squeeze(), cmap=colormap, vmin=0, vmax=1)
# ax6.add_patch(circle4)
# plt.axis('off')

# ax7 = fig.add_subplot(2, 4, 7)
# im7 = ax7.imshow(tfno_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
# ax7.add_patch(circle5)
# plt.axis('off')

# ax8 = fig.add_subplot(2, 4, 8)
# im8 = ax8.imshow(unet_out.to('cpu').squeeze().detach().numpy(), cmap=colormap, vmin=0, vmax=1)
# ax8.add_patch(circle6)
# plt.axis('off')

# plt.tight_layout()
# plt.savefig(f'/home/sci/hdai/Projects/UltrasoundTfno/Checkpoints/paper_plot_{config}_{correlation}.pdf', dpi=300)