close all
clc
clear all
% Heterogeneous Propagation Medium Example
%
% This example provides a simple demonstration of using k-Wave for the
% simulation and detection of the pressure field generated by an initial
% pressure distribution within a two-dimensional heterogeneous propagation
% medium. It builds on the Homogeneous Propagation Medium Example. 

clearvars;
% =========================================================================
% SIMULATION
% =========================================================================

% create the computational grid
resolution = 128;
Nx = resolution;           % number of grid points in the x (row) direction
Ny = resolution;           % number of grid points in the y (column) direction
dx = 0.01e-2;        % grid point spacing in the x direction [m]
dy = 0.01e-2;        % grid point spacing in the y direction [m]
kgrid = kWaveGrid(Nx, dx, Ny, dy);
kgrid.Nt = 1000;
kgrid.dt = 4e-8;
% kgrid.Nt = 4000;
% kgrid.dt = 1.8939e-8;

% create density field
medium.density = 1000 * ones(Nx, Ny);
medium.alpha_coeff = 0.5;
medium.alpha_power = 1.4;

% define a centered circular sensor
sensor_radius = 0.4e-2;   % [m]
num_sensor_points = 128;
num_pressure_point = 128;
sensor.mask = makeCartCircle(sensor_radius, num_sensor_points);
theta = linspace(0,2*pi,num_pressure_point);
pressure_cartisian_coord = cat(1,cos(theta),sin(theta))*sensor_radius*10000;

% preset pressure configuration
disc_x_pos_list = round(pressure_cartisian_coord(1,:)+resolution/2);
disc_y_pos_list = round(pressure_cartisian_coord(2,:)+resolution/2);
disc_magnitude = 100; % [Pa]
disc_radius = 0;    % [grid points]

tof_array = zeros(num_pressure_point,num_sensor_points);

for sound_speed_id = 1:1
    % create speed of sound field
    x = linspace(-1,1,resolution);
    [X,Y] = meshgrid(x,x); 
    mesh = [X(:) Y(:)]; % 2-D mesh
    % make speed of sound image
    distance = sqrt(X.^2+Y.^2);
    sound_speed = 1500 * ones(Nx, Ny);
    medium.sound_speed = sound_speed;
    figure('visible','off');
    set(gcf,'position',[580,220,700,600])
    fig1 = imagesc(sound_speed);
    colormap('jet');
    ylabel('y');
    xlabel('x');
    colorbar;
    save('F:/Ultrasound/GRF/mats/sound_speed/water_sound_speed.mat','sound_speed','-mat');
    saveas(fig1, 'F:/Ultrasound/GRF/figures/water_sound_speed.png');
    
    for pressure_pos_id = 1:num_pressure_point
        disp([sound_speed_id pressure_pos_id]);
        % create initial pressure distribution using makeDisc
        disc_x_pos = disc_x_pos_list(pressure_pos_id);    % [grid points]
        disc_y_pos = disc_y_pos_list(pressure_pos_id);    % [grid points]
        p0 = disc_magnitude * makeDisc(Nx, Ny, disc_x_pos, disc_y_pos, disc_radius);
        [phi,psi,x] = wavefun('db8',6);
%         x = ((x - min(x))/abs(min(x) - max(x)))*10^(-5);
        psi = circshift(flip(psi),-100);
        source.p_mask = p0>0;
        source.p = zeros(1,kgrid.Nt);
        source.p(1,1:size(psi,2)) = psi*disc_magnitude;
        
        % run the simulation with optional inputs for plotting the simulation
        % layout in addition to removing the PML from the display
        save_layout_wo_disp = 1;
        sensor_data = kspaceFirstOrder2D(kgrid, medium, source, sensor, ...
            sound_speed_id, pressure_pos_id, 'PlotLayout', false, 'PlotPML', false, 'PlotSim', false);%'SaveLayoutWoDisp', true, 
        
        % =========================================================================
        % VISUALISATION
        % =========================================================================
        
        simulation_data.pressure = source.p;
        simulation_data.density = medium.density;
        simulation_data.sensor_pos = sensor.mask;
        simulation_data.sensor_data = sensor_data;
        tof = zeros(num_sensor_points,1);
        for receiver_id=1:num_sensor_points
            correlation = xcorr(sensor_data(pressure_pos_id,:),sensor_data(receiver_id,:));
            [argvalue, argmax] = max(correlation);
            tof(receiver_id,:) = argmax;
        end
        tof = (kgrid.Nt-tof)*kgrid.dt;
        tof_array(pressure_pos_id,:) = tof;
        save(sprintf('F:/Ultrasound/GRF/mats/distribution_pair/water_pos%d_distribution_pair.mat', pressure_pos_id),'simulation_data','-mat');
    end

    figure('visible','off');
    set(gcf,'position',[1080,720,600,600])
    fig2 = imagesc(tof_array.', [min(min(tof_array)), max(max(tof_array))]);
    colormap('jet');
    xlabel('Pressure Position');
    ylabel('Sensor Position');
    colorbar;
    save('F:/Ultrasound/GRF/water_tof.mat','tof_array','-mat');
    saveas(fig2, 'F:/Ultrasound/GRF/water_tof.png');
end

        